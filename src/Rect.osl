/* --------------------- */
/* (C) 2020 madoodia.com */
/*  All Rights Reserved  */
/* --------------------- */

vector fract(vector uv)
{
  return uv - floor(uv);
}

color Rectangle(
    vector UV,
    point center,
    float Size,
    float Fuzz,
    float Dist,
    float DistScale,
    vector Scale,
    float Width,
    float Angle)
{
  point pnt = UV;
  vector diff = pnt - center;

  diff = rotate(diff, Angle, point(0, 0, 0), point(0, 0, 1));
  diff /= Scale;

  vector distort = noise("perlin", pnt / DistScale) * Dist;
  diff += distort; // * sin(time) * 10

  color col = smoothstep(-Size, -Size + Fuzz, diff[0]);
  col *= 1. - smoothstep(Size - Fuzz, Size, diff[0]);
  col *= smoothstep(-Size, -Size + Fuzz, diff[1]);
  col *= 1. - smoothstep(Size - Fuzz, Size, diff[1]);

  float iSize = Size - Width;

  color col2 = smoothstep(-iSize, -iSize + Fuzz, diff[0]);
  col2 *= 1. - smoothstep(iSize - Fuzz, iSize, diff[0]);
  col2 *= smoothstep(-iSize, -iSize + Fuzz, diff[1]);
  col2 *= 1. - smoothstep(iSize - Fuzz, iSize, diff[1]);

  col *= 1 - col2;
  return col;
}

shader main(
    point center = point(.5, .5, 0),
    float Size = .5,
    float Fuzz = .01,
    float Dist = .0,
    float DistScale = .1,
    vector Scale = 1,
    float Width = .1,
    float Angle = 0.,
    int grids = 1,
    output color Cout = 0)
{
  vector uv = vector(u, v, 0);
  uv *= grids;
  vector gv = fract(uv);

  Cout = Rectangle(gv, center, Size, Fuzz, Dist, DistScale, Scale, Width, Angle);
}